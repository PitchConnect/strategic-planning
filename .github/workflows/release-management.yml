name: Generate Release PR

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.2.0)'
        required: true

jobs:
  create-release-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Create Release Branch
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git checkout develop
          git pull
          git checkout -b release/v${{ github.event.inputs.version }}
          git push -u origin release/v${{ github.event.inputs.version }}
      
      - name: Collect Pending Issues
        id: collect-issues
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            
            console.log('Collecting issues with merged-to-develop label');
            
            // Get all issues with 'merged-to-develop' label
            const { data: issues } = await github.rest.issues.listForRepo({
              owner,
              repo,
              state: 'open',
              labels: 'merged-to-develop'
            });
            
            console.log(`Found ${issues.length} issues with merged-to-develop label`);
            
            // Format issues for PR description
            let issueList = '';
            let issueRefs = '';
            
            issues.forEach(issue => {
              issueList += `- #${issue.number}: ${issue.title}\n`;
              issueRefs += `Fixes #${issue.number}\n`;
              console.log(`Including issue #${issue.number}: ${issue.title}`);
            });
            
            // Return as a stringified JSON object to preserve formatting
            return {
              result: JSON.stringify({ issueList, issueRefs })
            };
      
      - name: Create Release PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const version = '${{ github.event.inputs.version }}';
            
            // Parse the JSON string back to an object
            const { issueList, issueRefs } = JSON.parse(${{ steps.collect-issues.outputs.result }});
            
            console.log(`Creating release PR for version ${version}`);
            
            const body = `# Release v${version}

## Issues included in this release:
${issueList}

## Changelog
[Add release notes here]

${issueRefs}`;
            
            const { data: pr } = await github.rest.pulls.create({
              owner,
              repo,
              title: `Release v${version}`,
              head: `release/v${version}`,
              base: 'main',
              body: body
            });
            
            console.log(`Created release PR #${pr.number}`);
            
            return {
              pr_number: pr.number,
              pr_url: pr.html_url
            };
